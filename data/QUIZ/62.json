{
  "title": "MPP数据库",
  "single-choice": [
    {
      "question": "在MPP（Massively Parallel Processing）数据库架构中，以下哪项是其核心设计原则？",
      "options": ["A. 通过单个节点处理所有数据以保证一致性", "B. 将数据和计算任务并行分布在多个节点上", "C. 依赖磁带存储以降低存储成本", "D. 使用集中式内存管理来简化调度"],
      "right-answer": "B"
    },
    {
      "question": "关于MPP数据库中的数据分布策略，以下哪种说法是正确的？",
      "options": ["A. 哈希分布通常用于小表的复制以加速JOIN操作", "B. 轮询分布（Round-robin）能确保数据均匀分布但可能影响JOIN性能", "C. 列式存储是MPP数据库中唯一支持的数据格式", "D. 所有MPP数据库都强制使用基于键的分布策略"],
      "right-answer": "B"
    },
    {
      "question": "在MPP架构中，哪个组件负责协调多个计算节点之间的任务调度和通信？",
      "options": ["A. 数据仓库中间件", "B. 元数据管理器", "C. 查询优化器", "D. 分布式执行引擎"],
      "right-answer": "D"
    },
    {
      "question": "MPP数据库与传统单机数据库在处理大规模数据时的关键优势是什么？",
      "options": ["A. 更高的数据冗余以保证持久性", "B. 通过横向扩展（scale-out）提升处理能力", "C. 更强的事务一致性支持", "D. 更低的硬件成本"],
      "right-answer": "B"
    },
    {
      "question": "在MPP系统中，JOIN操作通常面临的主要挑战是什么？",
      "options": ["A. 内存容量限制导致频繁的磁盘交换", "B. 数据倾斜（skew）可能导致某些节点负载过高", "C. 无法支持外键约束", "D. 查询优化器无法识别JOIN路径"],
      "right-answer": "B"
    },
    {
      "question": "以下关于MPP数据库中数据复制的描述，哪一项是准确的？",
      "options": ["A. 数据复制会显著增加数据一致性维护的复杂性", "B. 所有MPP系统都默认对所有表进行全量复制", "C. 复制主要用于提升数据安全性，与性能无关", "D. 复制表通常存储在与主表相同的节点上"],
      "right-answer": "A"
    },
    {
      "question": "为什么MPP数据库通常采用列式存储而非行式存储？",
      "options": ["A. 列式存储支持更高效的索引构建", "B. 列式存储在扫描特定列时具有更高的I/O效率", "C. 列式存储简化了事务处理机制", "D. 列式存储减少了网络传输中的数据冗余"],
      "right-answer": "B"
    },
    {
      "question": "以下哪个是MPP数据库中用于优化大规模数据扫描的关键技术？",
      "options": ["A. 索引跳跃扫描", "B. 数据字典压缩", "C. 列裁剪（Column Pruning）", "D. 内存预取"],
      "right-answer": "C"
    }
  ],
  "short-answer": [
    {
      "question": "请解释MPP数据库如何通过并行处理机制实现对大规模数据的高效查询。"
    },
    {
      "question": "简述在MPP系统中，数据分布策略对JOIN性能的影响及常见优化手段。"
    }
  ]
}