{
  "title": "分布式策略API",
  "single-choice": [
    {
      "question": "在分布式策略API中，以下哪项是实现状态同步的核心机制？",
      "options": ["A. 基于共享内存的同步", "B. 基于消息队列的事件广播", "C. 基于全局时间戳的版本控制", "D. 基于数据库事务的ACID保障"],
      "right-answer": "C"
    },
    {
      "question": "关于分布式策略API的幂等性设计，以下哪项描述最为准确？",
      "options": ["A. 确保每次调用都产生相同的结果，无论调用次数", "B. 保证所有请求都能在指定时间内完成", "C. 允许客户端重复发送请求而不影响系统状态", "D. 通过加密方式保护API调用的安全性"],
      "right-answer": "C"
    },
    {
      "question": "在实现分布式策略API时，以下哪项技术最常用于解决服务发现的问题？",
      "options": ["A. 通过静态配置文件硬编码服务地址", "B. 使用DNS解析服务地址", "C. 集成服务注册与发现组件（如Consul或Zookeeper）", "D. 采用轮询机制自动探测可用服务"],
      "right-answer": "C"
    },
    {
      "question": "当使用分布式策略API时，下列哪项是应对网络分区（Network Partition）最有效的策略？",
      "options": ["A. 强制所有节点实时同步数据", "B. 采用最终一致性模型并结合冲突解决机制", "C. 关闭所有非核心服务以减少网络负载", "D. 限制API调用频率以降低网络压力"],
      "right-answer": "B"
    },
    {
      "question": "在设计高可用的分布式策略API时，以下哪项原则最有助于避免单点故障？",
      "options": ["A. 采用主备模式部署核心服务", "B. 引入健康检查与自动故障转移机制", "C. 将所有配置信息集中存储于单点数据库", "D. 限制API的并发访问数量"],
      "right-answer": "B"
    },
    {
      "question": "以下哪项是分布式策略API中实现负载均衡的典型方式？",
      "options": ["A. 通过客户端硬编码服务地址进行连接", "B. 采用中心化的API网关进行请求分发", "C. 依赖应用层逻辑手动分配请求", "D. 每个服务节点独立处理所有请求"],
      "right-answer": "B"
    },
    {
      "question": "在分布式策略API中，以下哪项是保障数据一致性的关键机制？",
      "options": ["A. 增加服务节点数量", "B. 使用强一致性协议（如Paxos或Raft）", "C. 提升网络带宽", "D. 降低API调用频率"],
      "right-answer": "B"
    },
    {
      "question": "关于分布式策略API的可观测性，以下哪项描述是正确的？",
      "options": ["A. 应包含日志、指标和追踪三要素", "B. 仅依赖第三方监控工具即可满足需求", "C. 可观测性对性能影响可以忽略不计", "D. 只需关注API的调用成功率即可"],
      "right-answer": "A"
    }
  ],
  "short-answer": [
    {
      "question": "请简述在分布式策略API设计中，为何需要考虑幂等性，并举一个实际应用场景说明。"
    },
    {
      "question": "解释分布式策略API中“最终一致性”与“强一致性”的区别，并说明在何种业务场景下应选择前者。"
    }
  ]
}