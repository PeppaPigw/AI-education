{
  "title": "大规模并行处理",
  "single-choice": [
    {
      "question": "在大规模并行处理系统中，以下哪项技术最直接地用于解决任务间的同步与通信问题？",
      "options": ["A. 数据分片", "B. 负载均衡", "C. 消息传递接口（MPI）", "D. 内存映射"],
      "right-answer": "C"
    },
    {
      "question": "根据阿姆达尔定律，系统加速比的理论上限主要受限于什么？",
      "options": ["A. 并行处理器的数量", "B. 串行代码所占的比例", "C. 内存带宽", "D. 数据依赖性"],
      "right-answer": "B"
    },
    {
      "question": "以下关于大规模并行处理（MPP）架构的描述，哪一项是准确的？",
      "options": ["A. MPP系统通常采用共享内存模型，所有节点访问同一内存空间", "B. MPP系统中，每个处理节点拥有独立的内存和存储，通过高速网络通信", "C. MPP系统特别适合处理高I/O密集型的事务型应用", "D. MPP系统中，任务调度完全由中央控制器统一管理"],
      "right-answer": "B"
    },
    {
      "question": "在大规模并行处理中，'数据倾斜'（Data Skew）问题可能导致：",
      "options": ["A. 所有节点的处理负载均衡", "B. 某些节点处理任务远多于其他节点，导致整体性能下降", "C. 网络带宽利用率显著提高", "D. 任务间通信延迟降低"],
      "right-answer": "B"
    },
    {
      "question": "以下哪种并行编程模型最常用于大规模并行处理中的大规模数据集处理？",
      "options": ["A. OpenMP", "B. CUDA", "C. MapReduce", "D. POSIX线程"],
      "right-answer": "C"
    },
    {
      "question": "在大规模并行处理系统中，'扩展性'（Scalability）通常指的是：",
      "options": ["A. 系统可以支持的用户数量", "B. 系统在增加资源（如CPU、内存）后，性能提升的比例", "C. 数据传输速率的提升", "D. 系统对多种编程语言的支持程度"],
      "right-answer": "B"
    },
    {
      "question": "以下哪一项不是大规模并行处理系统设计时需要重点考虑的挑战？",
      "options": ["A. 任务划分与负载均衡", "B. 数据分区策略", "C. 串行代码优化", "D. 通信开销最小化"],
      "right-answer": "C"
    },
    {
      "question": "在大规模并行处理中，'通信密集型'任务与'计算密集型'任务相比，通常更易受到什么因素的制约？",
      "options": ["A. CPU运算能力", "B. 内存容量", "C. 网络延迟和带宽", "D. 磁盘I/O速度"],
      "right-answer": "C"
    }
  ],
  "short-answer": [
    {
      "question": "请解释在大规模并行处理系统中，为何数据分区策略（Data Partitioning Strategy）对于系统的整体性能至关重要，并举例说明两种常见的数据分区方法。"
    },
    {
      "question": "大规模并行处理系统在处理实时数据流时面临哪些主要挑战？请从数据一致性、延迟和容错性三个方面进行简要分析。"
    }
  ]
}