{
  "title": "HDFS数据操作",
  "single-choice": [
    {
      "question": "在HDFS中，一个文件被分割成多个块（block），请问默认的块大小是多少？",
      "options": ["A. 128MB", "B. 64MB", "C. 256MB", "D. 1GB"],
      "right-answer": "A"
    },
    {
      "question": "当HDFS客户端向NameNode请求写入文件时，NameNode会返回什么信息以指导客户端如何写入数据？",
      "options": ["A. 所有DataNode的IP地址列表", "B. 目标文件的块ID和副本数量", "C. 一个包含DataNode地址的块位置列表", "D. 需要写入数据的数据块的CRC校验值"],
      "right-answer": "C"
    },
    {
      "question": "以下关于HDFS中NameNode和DataNode的说法，哪一项是正确的？",
      "options": ["A. NameNode存储文件数据，DataNode存储元数据", "B. NameNode是无状态的，DataNode负责实际的块存储和读写", "C. DataNode定期向NameNode报告块信息，NameNode负责维护文件系统的命名空间", "D. NameNode和DataNode都负责数据块的复制和容错"],
      "right-answer": "C"
    },
    {
      "question": "在HDFS中，如果一个DataNode发生故障，NameNode会如何处理该节点上的数据块？",
      "options": ["A. 立即将数据块从其他DataNode复制到该节点以恢复", "B. 从其他DataNode中重新复制该数据块，以确保副本数达到指定值", "C. 等待该DataNode恢复后自动同步数据", "D. 删除该数据块的所有副本并通知客户端"],
      "right-answer": "B"
    },
    {
      "question": "HDFS中的文件一旦被创建，在写入过程中是否支持追加（append）操作？",
      "options": ["A. 支持，但必须在写入前明确声明", "B. 不支持，文件一旦创建就不能再写入", "C. 支持，但只能从文件末尾添加数据", "D. 不支持，必须先关闭文件才能重新打开写入"],
      "right-answer": "C"
    },
    {
      "question": "在HDFS中，客户端如何读取一个文件？",
      "options": ["A. 直接从DataNode读取，NameNode仅提供文件元数据", "B. 从NameNode获取文件块的位置信息，然后直接从DataNode读取", "C. 所有数据都通过NameNode中转，以保证一致性", "D. 客户端必须连接到与文件块相同的DataNode才能读取"],
      "right-answer": "B"
    },
    {
      "question": "关于HDFS的块（block）大小，下列说法正确的是？",
      "options": ["A. 块大小越大，数据传输效率越高，但可能导致磁盘空间浪费", "B. 块大小越大，数据块复制越快，但降低容错性", "C. 块大小越小，读写延迟越低，但增加NameNode的内存开销", "D. 块大小对HDFS性能没有影响，可以任意设置"],
      "right-answer": "A"
    },
    {
      "question": "在HDFS中，如果客户端要读取一个文件，而文件的某个块恰好位于一个宕机的DataNode上，HDFS会如何处理？",
      "options": ["A. 客户端会直接跳过该块，继续读取其他块", "B. NameNode会从其他副本中重新分配该块的读取任务", "C. 读取操作会失败，直到该DataNode恢复", "D. 客户端会等待该DataNode恢复后才继续读取"],
      "right-answer": "B"
    }
  ],
  "short-answer": [
    {
      "question": "请简述HDFS中NameNode和DataNode之间的通信机制，以及这种机制是如何保证数据一致性和可靠性的。"
    },
    {
      "question": "为什么HDFS不适合存储大量小文件？请结合其架构特点进行解释。"
    }
  ]
}