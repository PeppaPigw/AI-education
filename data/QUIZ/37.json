{
  "title": "ACID与BASE模型",
  "single-choice": [
    {
      "question": "在ACID特性中，哪一个特性保证了数据库事务的更改要么完全成功，要么完全失败，从而避免部分更新？",
      "options": ["A. 原子性 (Atomicity)", "B. 一致性 (Consistency)", "C. 隔离性 (Isolation)", "D. 持久性 (Durability)"],
      "right-answer": "A"
    },
    {
      "question": "BASE模型通常用于哪种类型的应用场景？",
      "options": ["A. 需要强一致性的金融交易系统", "B. 实时性要求高、可容忍短暂不一致的互联网应用", "C. 传统的关系型数据库管理系统", "D. 所有需要高可靠性的事务处理系统"],
      "right-answer": "B"
    },
    {
      "question": "以下关于ACID与BASE模型的说法中，哪一项是正确的？",
      "options": ["A. ACID模型是一种在分布式系统中实现最终一致性的策略", "B. BASE模型完全放弃了数据一致性，只追求可用性", "C. ACID模型通过牺牲可用性来保证强一致性", "D. BASE模型中的“S”代表“持久性 (Durability)”"],
      "right-answer": "C"
    },
    {
      "question": "在BASE模型中，“最终一致性”指的是什么？",
      "options": ["A. 所有副本在任何时刻都保持完全相同的值", "B. 系统在经过一段时间后，所有副本最终会达到一致状态", "C. 数据库系统在事务提交时立即保证所有节点数据一致", "D. 所有节点在提交事务时必须同步更新"],
      "right-answer": "B"
    },
    {
      "question": "以下哪一项是ACID模型中“一致性 (Consistency)”的正确解释？",
      "options": ["A. 事务执行期间，所有中间状态对其他事务不可见", "B. 事务的执行结果必须使数据库从一个合法状态转换到另一个合法状态", "C. 事务提交后，其结果必须永久保存", "D. 多个事务并发执行时，彼此之间互不干扰"],
      "right-answer": "B"
    },
    {
      "question": "在分布式系统中，BASE模型通常通过以下哪种机制来实现高可用性？",
      "options": ["A. 两阶段提交 (2PC)", "B. 强同步复制", "C. 副本异步复制与故障转移", "D. 所有节点必须实时保持一致"],
      "right-answer": "C"
    },
    {
      "question": "关于ACID模型中的“隔离性 (Isolation)”，以下描述正确的是？",
      "options": ["A. 保证事务的执行结果不会被其他并发事务干扰", "B. 保证事务在提交前对其他事务可见", "C. 保证事务一旦提交，其更改不会被撤销", "D. 保证数据在故障后能恢复到一致状态"],
      "right-answer": "A"
    },
    {
      "question": "以下哪项是BASE模型与ACID模型的主要区别？",
      "options": ["A. BASE模型不适用于任何数据库系统", "B. BASE模型强调最终一致性，而ACID强调强一致性", "C. BASE模型不支持事务处理", "D. ACID模型更适合高并发的互联网应用"],
      "right-answer": "B"
    }
  ],
  "short-answer": [
    {
      "question": "请简要解释在分布式系统中，为何BASE模型通常更适合高可用性要求的应用场景。"
    },
    {
      "question": "请对比ACID与BASE模型在数据一致性和可用性之间的权衡，并举例说明实际应用中的选择依据。"
    }
  ]
}