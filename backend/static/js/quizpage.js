let questions = [];
let currentIndex = 0;
let score = 0;
let answered = false;
let userAnswers = [];
let totalChoiceQuestions = 0;
let quizTopic = "";

const API_URL = "https://api.siliconflow.cn/v1/chat/completions";
const API_KEY = "sk-iujgwjycqgmvzxycfgyynuowipaykmbbcneerzvdnehpqvfs";

function generate_QUESTION_TEMPLATE(core_topic) {
  return `# ËßíËâ≤‰∏é‰ªªÂä° üéØ
‰Ω†ÊòØ‰∏Ä‰ΩçËµÑÊ∑±ÁöÑ**ÊïôËÇ≤ËØÑ‰º∞‰∏ìÂÆ∂**Âíå**‰∏ì‰∏öÂëΩÈ¢ò‰∫∫**„ÄÇ‰Ω†ÁöÑ‰ªªÂä°ÊòØÊ†πÊçÆÁªôÂÆöÁöÑÊ†∏ÂøÉ‰∏ªÈ¢òÔºåÁîüÊàê‰∏ÄÂ•óÈ´òË¥®Èáè„ÄÅ‰∏•Ë∞®ÁöÑÊµãÈ™åÈ¢ò„ÄÇ

# Ê†∏ÂøÉ‰∏ªÈ¢ò
Êàë‰ª¨ÁöÑËØæÁ®ãÊòØÂ§ßÊï∞ÊçÆÂàÜÊûêÂü∫Á°Ä„ÄÇÂõ†Ê≠§È¢òÁõÆ‰∏éÂ§ßÊï∞ÊçÆÁõ∏ÂÖ≥„ÄÇ
Êú¨Â•óÊµãÈ™åÁöÑÊ†∏ÂøÉ‰∏ªÈ¢òÊòØÔºö**${core_topic}**

# Ë¥®Èáè‰∏é‰∏•Ë∞®ÊÄßË¶ÅÊ±Ç üßê
1.  **‰∏ì‰∏öÊÄß**ÔºöÈ¢òÁõÆÂøÖÈ°ªÂèçÊò†ËØ•‰∏ªÈ¢òÁöÑÊ†∏ÂøÉÊ¶ÇÂøµÂíåÂÖ≥ÈîÆÁü•ËØÜÁÇπ„ÄÇ
2.  **‰∏•Ë∞®ÊÄß**ÔºöÈóÆÈ¢òË°®Ëø∞Ê∏ÖÊô∞Êó†Ê≠ß‰πâÔºåÁ≠îÊ°àÂîØ‰∏Ä‰∏îÊ≠£Á°Æ„ÄÇ
3.  **Ëø∑ÊÉëÊÄßÔºàÈÄâÊã©È¢òÔºâ**ÔºöÈîôËØØÈÄâÈ°π (Distractors) ÂøÖÈ°ªÂÖ∑ÊúâÈ´òÂ∫¶ÁöÑËø∑ÊÉëÊÄßÔºåÊòØÂü∫‰∫éÂ∏∏ËßÅËØØËß£ËÆæËÆ°ÁöÑÔºåËÄå‰∏çËÉΩÊòØÊòéÊòæÊó†ÂÖ≥ÁöÑÈÄâÈ°π„ÄÇ

# Êï∞Èáè‰∏éÊ†ºÂºèË¶ÅÊ±Ç („ÄêÂº∫Âà∂„Äë)
ËØ∑**‰∏•Ê†º‰∏î‰ªÖ**ËæìÂá∫‰∏Ä‰∏™Á¨¶Âêà‰ª•‰∏ãÊ†ºÂºèÁöÑ JSON ÂØπË±°„ÄÇ**Á¶ÅÊ≠¢**Âú® JSON ÂØπË±°ÂâçÂêéÊ∑ªÂä†‰ªª‰ΩïÂºÄÂú∫ÁôΩ„ÄÅËß£Èáä„ÄÅÊÄªÁªìÊàñ Markdown Ê†áËÆ∞ (Â¶Ç \`\`\`json ... \`\`\`)„ÄÇ

**Êï∞Èáè**ÔºöÂøÖÈ°ªÂåÖÂê´ **8 ‰∏™** \`single-choice\` È¢òÁõÆ Âíå **2 ‰∏™** \`short-answer\` È¢òÁõÆ„ÄÇ

!!!Ê≥®ÊÑèfillinblankÊòØÁÆÄÁ≠îÈ¢òËÄå‰∏çÊòØÂ°´Á©∫È¢ò„ÄÇÈÄâÊã©È¢òÈúÄË¶ÅÁªôÂá∫Á≠îÊ°à„ÄÇÈÄâÊã©È¢òÂåÖÂê´‰∏â‰∏™Â≠óÊÆµ[question,options,right-answer]„ÄÇ‰∏ªËßÇÈ¢òÂåÖÂê´‰∏Ä‰∏™Â≠óÊÆµ"question"

**JSON Ê†ºÂºè**Ôºö
{
  "title": "${core_topic}",
  "single-choice": [
    {
      "question": "ÔºàËøôÈáåÊòØÁ¨¨ 1 ‰∏™ÈÄâÊã©È¢òÈóÆÈ¢òÔºâ",
      "options": ["A. ÈÄâÈ°πA", "B. ÈÄâÈ°πB", "C. ÈÄâÈ°πC", "D. ÈÄâÈ°πD"],
      "right-answer": "ÔºàA, B, C Êàñ DÔºâ"
    },
    {
      "question": "ÔºàËøôÈáåÊòØÁ¨¨ 2 ‰∏™ÈÄâÊã©È¢òÈóÆÈ¢òÔºâ",
      "options": ["A. ÈÄâÈ°πA", "B. ÈÄâÈ°πB", "C. ÈÄâÈ°πC", "D. ÈÄâÈ°πD"],
      "right-answer": "ÔºàA, B, C Êàñ DÔºâ"
    },
    {
      "question": "ÔºàËøôÈáåÊòØÁ¨¨ 3 ‰∏™ÈÄâÊã©È¢òÈóÆÈ¢òÔºâ",
      "options": ["A. ÈÄâÈ°πA", "B. ÈÄâÈ°πB", "C. ÈÄâÈ°πC", "D. ÈÄâÈ°πD"],
      "right-answer": "ÔºàA, B, C Êàñ DÔºâ"
    },
    {
      "question": "ÔºàËøôÈáåÊòØÁ¨¨ 4 ‰∏™ÈÄâÊã©È¢òÈóÆÈ¢òÔºâ",
      "options": ["A. ÈÄâÈ°πA", "B. ÈÄâÈ°πB", "C. ÈÄâÈ°πC", "D. ÈÄâÈ°πD"],
      "right-answer": "ÔºàA, B, C Êàñ DÔºâ"
    },
    {
      "question": "ÔºàËøôÈáåÊòØÁ¨¨ 5 ‰∏™ÈÄâÊã©È¢òÈóÆÈ¢òÔºâ",
      "options": ["A. ÈÄâÈ°πA", "B. ÈÄâÈ°πB", "C. ÈÄâÈ°πC", "D. ÈÄâÈ°πD"],
      "right-answer": "ÔºàA, B, C Êàñ DÔºâ"
    },
    {
      "question": "ÔºàËøôÈáåÊòØÁ¨¨ 6 ‰∏™ÈÄâÊã©È¢òÈóÆÈ¢òÔºâ",
      "options": ["A. ÈÄâÈ°πA", "B. ÈÄâÈ°πB", "C. ÈÄâÈ°πC", "D. ÈÄâÈ°πD"],
      "right-answer": "ÔºàA, B, C Êàñ DÔºâ"
    },
    {
      "question": "ÔºàËøôÈáåÊòØÁ¨¨ 7 ‰∏™ÈÄâÊã©È¢òÈóÆÈ¢òÔºâ",
      "options": ["A. ÈÄâÈ°πA", "B. ÈÄâÈ°πB", "C. ÈÄâÈ°πC", "D. ÈÄâÈ°πD"],
      "right-answer": "ÔºàA, B, C Êàñ DÔºâ"
    },
    {
      "question": "ÔºàËøôÈáåÊòØÁ¨¨ 8 ‰∏™ÈÄâÊã©È¢òÈóÆÈ¢òÔºâ",
      "options": ["A. ÈÄâÈ°πA", "B. ÈÄâÈ°πB", "C. ÈÄâÈ°πC", "D. ÈÄâÈ°πD"],
      "right-answer": "ÔºàA, B, C Êàñ DÔºâ"
    }
  ],
  "short-answer": [
    {
      "question": "ÔºàËøôÈáåÊòØÁ¨¨ 1 ‰∏™ÁÆÄÁ≠îÈ¢òÔºâ"
    },
    {
      "question": "ÔºàËøôÈáåÊòØÁ¨¨ 2 ‰∏™ÁÆÄÁ≠îÈ¢òÔºâ"
    }
  ]
}
ÂÜçÊ¨°ÊèêÁ§∫Ôºö
1.‰∏ªËßÇÈ¢ò‰∏çÊòØÂ°´Á©∫È¢òÔºåÂ∫îËØ•ÊòØÁ≠îÈ¢òËÄÖÁî®‰∏ÄÊÆµËØùÂõûÁ≠î„ÄÇ
2. ÈÄâÊã©È¢òÂøÖÈ°ªÊääÁ≠îÊ°à‰∏ÄËµ∑ËæìÂá∫Âú®json‰∏≠`;
}

// ‰ªé URL ÂèÇÊï∞Ëé∑Âèñ‰∏ªÈ¢ò
function getTopicFromURL() {
  const urlParams = new URLSearchParams(window.location.search);
  return urlParams.get("topic") || "Â§ßÊï∞ÊçÆÂàÜÊûêÂü∫Á°Ä"; // ÈªòËÆ§‰∏ªÈ¢ò
}

// Ë∞ÉÁî® LLM API ÁîüÊàêÈ¢òÁõÆ
async function generateQuestions(topic) {
  const prompt = generate_QUESTION_TEMPLATE(topic);

  try {
    const response = await fetch(API_URL, {
      method: "POST",
      headers: {
        Authorization: `Bearer ${API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "inclusionAI/Ling-mini-2.0",
        messages: [
          {
            role: "user",
            content: prompt,
          },
        ],
      }),
    });

    if (!response.ok) {
      throw new Error(`API ËØ∑Ê±ÇÂ§±Ë¥•: ${response.status}`);
    }

    const data = await response.json();
    const content = data.choices[0].message.content.trim();

    try {
      await fetch("/api/llm-log", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          messages: [{ role: "user", content: prompt }],
          response: data,
          model: "inclusionAI/Ling-mini-2.0",
          module: "frontend.quizpage",
          metadata: { function: "generateQuestions", topic: topic },
        }),
      });
    } catch (logError) {
      console.error("Failed to log LLM call:", logError);
    }

    let jsonContent = content;

    if (content.startsWith("```json")) {
      jsonContent = content.replace(/```json\s*/, "").replace(/```\s*$/, "");
    } else if (content.startsWith("```")) {
      jsonContent = content.replace(/```\s*/, "").replace(/```\s*$/, "");
    }

    const questionsData = JSON.parse(jsonContent);
    return questionsData;
  } catch (error) {
    console.error("ÁîüÊàêÈ¢òÁõÆÂ§±Ë¥•:", error);
    throw error;
  }
}

window.onload = function () {
  loadQuestions();
};

async function loadQuestions() {
  try {
    const topic = getTopicFromURL();
    quizTopic = topic;

    document.querySelector(
      ".json-upload p"
    ).textContent = `Ê≠£Âú®‰∏∫‰∏ªÈ¢ò"${topic}"ÁîüÊàêÊµãÈ™åÈ¢òÁõÆ...`;

    const questionsData = await generateQuestions(topic);

    processQuestions(questionsData);

    startQuiz();
  } catch (error) {
    alert("È¢òÁõÆÁîüÊàêÂ§±Ë¥•ÔºåËØ∑Âà∑Êñ∞È°µÈù¢ÈáçËØïÔºÅ");
    console.error("È¢òÁõÆÁîüÊàêÈîôËØØ:", error);

    document.querySelector(".json-upload p").textContent =
      "È¢òÁõÆÁîüÊàêÂ§±Ë¥•ÔºåËØ∑Âà∑Êñ∞È°µÈù¢ÈáçËØï";
    document.getElementById("loadingSpinner").style.display = "none";
  }
}

function processQuestions(jsonData) {
  questions = [];

  if (jsonData["single-choice"]) {
    jsonData["single-choice"].forEach((q) => {
      questions.push({
        type: "choice",
        question: q.question,
        options: q.options,
        answer: q["right-answer"],
      });
    });
    totalChoiceQuestions = jsonData["single-choice"].length;
  }

  if (jsonData["short-answer"]) {
    jsonData["short-answer"].forEach((q) => {
      questions.push({
        type: "text",
        question: q.question,
      });
    });
  }

  document.getElementById("totalQuestions").textContent = questions.length;
}

function startQuiz() {
  document.getElementById("jsonUpload").style.display = "none";
  document.getElementById("progressContainer").style.display = "block";
  currentIndex = 0;
  score = 0;
  answered = false;
  userAnswers = [];
  renderQuestion();
}

function updateProgress() {
  const progress = ((currentIndex + 1) / questions.length) * 100;
  document.getElementById("progressBar").style.width = progress + "%";
  document.getElementById("currentQuestion").textContent = currentIndex + 1;
}

function renderQuestion() {
  const container = document.getElementById("quizContainer");
  const q = questions[currentIndex];
  answered = false;

  let html = `
                          <div class="question-slide active">
                              <div class="question-header">
                                  <span class="question-number">${
                                    q.type === "choice" ? "ÈÄâÊã©È¢ò" : "ÁÆÄÁ≠îÈ¢ò"
                                  } ${currentIndex + 1}</span>
                                  <span class="question-type">${
                                    q.type === "choice"
                                      ? "ÂçïÈ°πÈÄâÊã©"
                                      : "ÂºÄÊîæÈóÆÁ≠î"
                                  }</span>
                              </div>
                              <div class="question-text">${q.question}</div>
                      `;

  if (q.type === "choice") {
    html += '<div class="options">';
    q.options.forEach((option, index) => {
      const letter = String.fromCharCode(65 + index);
      html += `<div class="option" onclick="selectOption('${letter}')"><span>${option}</span><span class="option-icon"></span></div>`;
    });
    html += "</div>";
    html += '<div class="feedback" id="feedback"></div>';
  } else {
    html += `
                              <textarea class="text-answer" id="textAnswer" placeholder="ËØ∑Âú®Ê≠§ËæìÂÖ•‰Ω†ÁöÑÁ≠îÊ°à..."></textarea>
                              <div class="feedback" id="feedback"></div>
                          `;
  }

  html += `
                          <div class="nav-buttons">
                              ${
                                currentIndex > 0
                                  ? '<button class="btn btn-secondary" onclick="previousQuestion()">‚Üê ‰∏ä‰∏ÄÈ¢ò</button>'
                                  : ""
                              }
                              <button class="btn" id="nextBtn" onclick="nextQuestion()" ${
                                q.type === "choice" ? "disabled" : ""
                              }>
                                  ${
                                    currentIndex === questions.length - 1
                                      ? "ÂÆåÊàêÊµãÈ™å ‚Üí"
                                      : "‰∏ã‰∏ÄÈ¢ò ‚Üí"
                                  }
                              </button>
                          </div>
                      </div>
                      `;

  container.innerHTML = html;
  updateProgress();
}

function selectOption(selected) {
  if (answered) return;

  const q = questions[currentIndex];
  const options = document.querySelectorAll(".option");
  const feedback = document.getElementById("feedback");
  const nextBtn = document.getElementById("nextBtn");

  options.forEach((opt) => opt.classList.add("disabled"));

  const isCorrect = selected === q.answer;
  userAnswers[currentIndex] = { selected, correct: isCorrect };

  if (isCorrect) {
    score++;
    feedback.className = "feedback correct show";
    feedback.textContent = "‚úì Â§™Ê£í‰∫ÜÔºÅÂõûÁ≠îÊ≠£Á°ÆÔºÅ";
  } else {
    feedback.className = "feedback incorrect show";
    feedback.textContent = `‚úó ÂõûÁ≠îÈîôËØØ„ÄÇÊ≠£Á°ÆÁ≠îÊ°àÊòØÔºö${q.answer}`;
  }

  options.forEach((opt) => {
    const letter = opt.querySelector("span").textContent.charAt(0);
    const icon = opt.querySelector(".option-icon");
    if (letter === q.answer) {
      opt.classList.add("correct");
      icon.textContent = "‚úì";
    } else if (letter === selected) {
      opt.classList.add("incorrect");
      icon.textContent = "‚úó";
    }
  });

  answered = true;
  nextBtn.disabled = false;
}

async function evaluateTextAnswer(question, answer) {
  const prompt = `ËØ∑‰Ω†‰Ωú‰∏∫‰∏Ä‰∏™ËØÑÂàÜËÄÅÂ∏àÔºåËØÑÂà§‰ª•‰∏ãÂ≠¶ÁîüÁöÑÁÆÄÁ≠îÈ¢òÁ≠îÊ°à„ÄÇ

È¢òÁõÆÔºö${question}

Â≠¶ÁîüÁ≠îÊ°àÔºö${answer}

ËØÑÂàÜÊ†áÂáÜÔºö
1. Á≠îÊ°àÊòØÂê¶ÁêÜËß£Âπ∂ÂõûÁ≠î‰∫ÜÈóÆÈ¢òÁöÑÊ†∏ÂøÉÂÜÖÂÆπ
2. Á≠îÊ°àÊòØÂê¶ÊúâÂÆûË¥®ÊÄßÁöÑÂÜÖÂÆπÔºà‰∏çÊòØÁ©∫Ê¥ûÊàñÊï∑Ë°çÁöÑÂõûÁ≠îÔºâ
3. Á≠îÊ°àÁöÑÈÄªËæëÊòØÂê¶Ê∏ÖÊô∞„ÄÅË°®ËææÊòØÂê¶ËøûË¥Ø
4. Á≠îÊ°àÊòØÂê¶ÂåÖÂê´‰∫ÜÁõ∏ÂÖ≥ÁöÑÁü•ËØÜÁÇπ

Â¶ÇÊûúÁ≠îÊ°àÊª°Ë∂≥‰ª•‰∏äÂ§ßÈÉ®ÂàÜÊ†áÂáÜÔºåÊúâ‰∏ÄÂÆöÁöÑË¥®ÈáèÂíåÊ∑±Â∫¶ÔºåËØ∑ÂõûÂ§ç"1|‰ºòÁßÄÁöÑÂõûÁ≠îÔºÅ‰Ω†ÁöÑÁ≠îÊ°àÊ∂µÁõñ‰∫ÜÂÖ≥ÈîÆË¶ÅÁÇπ„ÄÇ"
Â¶ÇÊûúÁ≠îÊ°àÂü∫Êú¨ÂêàÁêÜ‰ΩÜ‰∏çÂ§üÂÆåÊï¥ÊàñÊ∑±ÂÖ•ÔºåËØ∑ÂõûÂ§ç"1|ÂõûÁ≠îÊ≠£Á°ÆÔºå‰ΩÜËøòÂèØ‰ª•Êõ¥Âä†Ê∑±ÂÖ•„ÄÇ"
Â¶ÇÊûúÁ≠îÊ°àÊòéÊòæÈîôËØØ„ÄÅ‰∏çÁõ∏ÂÖ≥„ÄÅËøá‰∫éÁÆÄÂçïÊàñÁ©∫Ê¥ûÔºåËØ∑ÂõûÂ§ç"0|ÂõûÁ≠îÈúÄË¶ÅÊîπËøõ„ÄÇËØ∑Á°Æ‰øùÁêÜËß£È¢òÁõÆË¶ÅÊ±ÇÔºåÂπ∂Êèê‰æõÊõ¥ÂÖ∑‰ΩìÁöÑÂÜÖÂÆπ„ÄÇ"

ËæìÂá∫Ê†ºÂºèÔºö[ÂàÜÊï∞]|[ÂèçÈ¶à]ÔºåÂÖ∂‰∏≠ÂàÜÊï∞‰∏∫0Êàñ1„ÄÇ`;

  try {
    const response = await fetch(API_URL, {
      method: "POST",
      headers: {
        Authorization: `Bearer ${API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "inclusionAI/Ling-mini-2.0",
        messages: [
          {
            role: "user",
            content: prompt,
          },
        ],
      }),
    });

    const data = await response.json();
    const result = data.choices[0].message.content.trim();

    try {
      await fetch("/api/llm-log", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          messages: [{ role: "user", content: prompt }],
          response: data,
          model: "inclusionAI/Ling-mini-2.0",
          module: "frontend.quizpage",
          metadata: {
            function: "evaluateTextAnswer",
            question: question,
            answer: answer,
          },
        }),
      });
    } catch (logError) {
      console.error("Failed to log LLM call:", logError);
    }

    const parts = result.split("|");
    const scoreStr = parts[0].trim();
    const feedback = parts.length > 1 ? parts[1].trim() : "Â∑≤ËØÑÂàÜ";

    const score = scoreStr.includes("1") ? 1 : 0;

    return { score, feedback };
  } catch (error) {
    console.error("LLMËØÑÂàÜÈîôËØØ:", error);
    return { score: 1, feedback: "ËØÑÂàÜÁ≥ªÁªüÊöÇÊó∂‰∏çÂèØÁî®ÔºåÂ∑≤Ëá™Âä®ÁªôÂàÜ„ÄÇ" };
  }
}

async function nextQuestion() {
  const q = questions[currentIndex];

  if (q.type === "text") {
    const textAnswer = document.getElementById("textAnswer").value.trim();

    if (!textAnswer) {
      alert("ËØ∑ËæìÂÖ•Á≠îÊ°àÂêéÂÜçÁªßÁª≠ÔºÅ");
      return;
    }

    const feedback = document.getElementById("feedback");
    const nextBtn = document.getElementById("nextBtn");
    feedback.className = "feedback loading show";
    feedback.innerHTML =
      '<span class="loading-spinner"></span> Ê≠£Âú®ËØÑÂàÜ‰∏≠ÔºåËØ∑Á®çÂÄô...';
    nextBtn.disabled = true;

    const evalResult = await evaluateTextAnswer(q.question, textAnswer);

    userAnswers[currentIndex] = {
      answer: textAnswer,
      score: evalResult.score,
    };

    if (evalResult.score === 1) {
      score++;
      feedback.className = "feedback correct show";
      feedback.textContent = `‚úì ${evalResult.feedback}`;
    } else {
      feedback.className = "feedback incorrect show";
      feedback.textContent = `‚úó ${evalResult.feedback}`;
    }

    await new Promise((resolve) => setTimeout(resolve, 2000));
    nextBtn.disabled = false;
  }

  if (currentIndex < questions.length - 1) {
    const slide = document.querySelector(".question-slide");
    slide.classList.remove("active");
    slide.classList.add("exit");

    setTimeout(() => {
      currentIndex++;
      renderQuestion();
    }, 400);
  } else {
    showResults();
  }
}

function previousQuestion() {
  if (currentIndex > 0) {
    const slide = document.querySelector(".question-slide");
    slide.classList.remove("active");
    slide.classList.add("exit");

    setTimeout(() => {
      currentIndex--;
      renderQuestion();
    }, 400);
  }
}

async function showResults() {
  document.getElementById("quizContainer").style.display = "none";
  const resultScreen = document.getElementById("resultScreen");
  const finalScore = document.getElementById("finalScore");
  const resultMessage = document.getElementById("resultMessage");
  const resultIcon = document.querySelector(".result-icon");

  finalScore.textContent = `${score}/${questions.length}`;

  let message = "";
  let icon = "üéâ";
  const percentage = (score / questions.length) * 100;

  if (percentage >= 90) {
    message = "‰ºòÁßÄÔºÅ‰Ω†ÁöÑË°®Áé∞ÈùûÂ∏∏Âá∫Ëâ≤ÔºÅ";
    icon = "üèÜ";
  } else if (percentage >= 70) {
    message = "ËâØÂ•ΩÔºÅÁªßÁª≠‰øùÊåÅÔºÅ";
    icon = "‚≠ê";
  } else if (percentage >= 60) {
    message = "ÂèäÊ†ºÔºÅËøòÊúâËøõÊ≠•Á©∫Èó¥„ÄÇ";
    icon = "üëç";
  } else {
    message = "ÁªßÁª≠Âä™ÂäõÔºÅ‰∏çË¶ÅÊ∞îÈ¶Å„ÄÇ";
    icon = "üí™";
  }

  resultIcon.textContent = icon;
  resultMessage.innerHTML = `
                          ÊÄªÂæóÂàÜÔºö${score}/${questions.length} ÂàÜ<br>
                          ${message}<br><br>
                          ÊÑüË∞¢‰Ω†ÂÆåÊàêÊâÄÊúâÈ¢òÁõÆÔºÅ
                      `;

  resultScreen.classList.add("show");
  document.getElementById("progressBar").style.width = "100%";

  if (quizTopic && percentage >= 80) {
    try {
      const response = await fetch("/api/quiz/complete", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          node_name: quizTopic,
          score: score,
          total: questions.length,
        }),
      });
      const data = await response.json();
      if (data.success) {
        console.log("‚úÖ Quiz completion recorded");
      }
    } catch (error) {
      console.error("Error recording quiz completion:", error);
    }
  }
}
